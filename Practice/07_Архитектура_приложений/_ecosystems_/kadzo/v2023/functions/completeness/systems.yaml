kadzo:
  systems.completeness:
    systems_full: >
      (
          $all:=$.dataset;
          $domain := $.domain;
          $matcher := $eval('/^' & $domain & '\\./i');
          $systems := $all."kadzo.v2023.systems".$spread()[$.$keys() ~> $matcher];
          $sum:=function($i, $j) {$i + $j};
          $rules := $.rules;
          $validators := $.validators[validator_type = "systems"];
          $validators := $validators[domain = $domain];
          $matcher := $eval('/^' & "systems" & '.*$/');
          $rules := $rules[$matcher($)];
          $weight_desc := 1;
          $weight_class := 1;
          $weight_owner := 1;
          $weight_location := 1;
          $weight_stage := 1;
          $weight_target := 1;
          $weight_target_status := 1;
          $weight_criticality := 1;
          $weight_group := 1;
          $weight_change_type := 1;
          $weight_performance := 1;
          $weight_sla := 1;
          $weight_rto := 1;
          $weight_rpo := 1;
          $weight_monitoring := 1;
          $weight_title := 1;
          $weight_systems := $weight_desc + $weight_class + $weight_owner + $weight_location + $weight_stage + $weight_target + $weight_target_status + $weight_criticality + $weight_group + $weight_change_type;
          $weight_systems := $weight_title + $weight_systems + $weight_performance + $weight_sla + $weight_rto + $weight_rpo + $weight_monitoring;
            $valid_title := [$validators[($.attr_id="title")].id];
            $valid_desc := [$validators[($.attr_id="description")].id];
            $valid_class := [$validators[($.attr_id="class")].id];
            $test_title:=$systems.(($keys() in $valid_title)? 0 : $weight_title);
            $test_desc:=$systems.(($keys() in $valid_desc) ? 0 : $weight_desc);
            $test_class:=$systems.(($keys() in $valid_class) ? 0 : $weight_class);
            $valid_owner := [$validators[($.attr_id="ownership")].id];
            $valid_location := [$validators[($.attr_id="location")].id];
            $test_owner:=$systems.(($keys() in $valid_owner) ? 0 : $weight_owner);
            $test_location:=$systems.(($keys() in $valid_location) ? 0 : $weight_location);
            $valid_stage := [$validators[($.attr_id="live-stage")].id];
            $valid_target := [$validators[($.attr_id="live-stage-target")].id];
            $valid_target_status := [$validators[($.attr_id="target-status")].id];
            $valid_owner := [$validators[($.attr_id="ownership")].id];
            $test_stage:=$systems.(($keys() in $valid_stage) ? 0 : $weight_stage);
            $test_target:=$systems.(($keys() in $valid_target) ? 0 : $weight_target);
            $test_target_status:=$systems.(($keys() in $valid_target_status) ? 0 : $weight_target_status);
            $test_owner2:=$systems.(($keys() in $valid_owner) ? 0 : 1);
            $valid_criticality := [$validators[($.attr_id="criticality")].id];
            $valid_owner := [$validators[($.attr_id="ownership")].id];
            $valid_location := [$validators[($.attr_id="location")].id];
            $test_criticality:=$systems.(($keys() in $valid_criticality) ? 0 : $weight_criticality);
            $test_owner3:=$systems.(($keys() in $valid_owner) ? 0 : 1);
            $test_location2:=$systems.(($keys() in $valid_location) ? 0 : 1);
            $valid_group := [$validators[($.attr_id="group")].id];
            $test_group:=$systems.(($keys() in $valid_group) ? 0 : $weight_group);
            $valid_change_type := [$validators[($.attr_id="change-type")].id];
            $test_change_type:=$systems.(($keys() in $valid_change_type) ? 0 : $weight_change_type);
              $valid_stage := [$validators[($.attr_id="\"live-stage\", \"live-stage-target\"")].id];
              $test_stage2:=$systems.(($keys() in $valid_stage) ? 0 : 1);
              $test_target2:=$systems.(($keys() in $valid_stage) ? 0 : 1);
              $valid_performance := [$validators[($.attr_id="performance")].id];
              $test_performance:=$systems.(($keys() in $valid_performance) ? 0 : $weight_performance);
              $valid_sla := [$validators[($.attr_id="sla")].id];
              $test_sla:=$systems.(($keys() in $valid_sla) ? 0 : $weight_sla);
              $valid_rto := [$validators[($.attr_id="rto")].id];
              $test_rto:=$systems.(($keys() in $valid_rto) ? 0 : $weight_rto);
              $valid_rpo := [$validators[($.attr_id="rpo")].id];
              $test_rpo:=$systems.(($keys() in $valid_rpo) ? 0 : $weight_rpo);
              $valid_monitoring := [$validators[($.attr_id="monitoring")].id];
              $test_monitoring:=$systems.(($keys() in $valid_monitoring) ? 0 : $weight_monitoring);
              $valid_stage := [$validators[($.attr_id="live-stage")].id];
              $test_stage3 := $systems.(($keys() in $valid_stage) ? 0 : $weight_stage);
              $valid_func := [$validators[($.error_type="Функциональность АС")].id];
              $errors := ($count($valid_func) != 0) ? '*';
          $total := $zip($test_desc, $test_class) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $test_owner := $zip($test_owner, $test_owner2) ~> $map(function($v, $i, $a) {$v[0] * $v[1]});
          $test_owner := $zip($test_owner, $test_owner3) ~> $map(function($v, $i, $a) {$v[0] * $v[1]});
          $total := $zip($total, $test_owner) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $test_location := $zip($test_location, $test_location2) ~> $map(function($v, $i, $a) {$v[0] * $v[1]});
          $total := $zip($total, $test_location) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $test_stage := $zip($test_stage, $test_stage2) ~> $map(function($v, $i, $a) {$v[0] * $v[1]});
          $test_stage := $zip($test_stage, $test_stage3) ~> $map(function($v, $i, $a) {$v[0] * $v[1]});
          $total := $zip($total, $test_stage) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $test_target := $zip($test_target, $test_target2) ~> $map(function($v, $i, $a) {$v[0] * $v[1]});
          $total := $zip($total, $test_target) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_target_status) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_criticality) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_group) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_change_type) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_performance) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_sla) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_rto) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_rpo) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_monitoring) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_title) ~> $map(function($v, $i, $a) {$v[0] + $v[1]});
          $total := $zip($total, $test_title) ~> $map(function($v, $i, $a) {$v[0] * $v[1]});
          $total:= $map($total, function($v, $i, $a) {$v[0] / $weight_systems});
          $sum_except := $reduce($total, $sum);
          $matcher := $eval('/^.*' & "rto" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_rto / $weight_systems;
          $matcher := $eval('/^.*' & "general" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_title / $weight_systems;
          $matcher := $eval('/^.*' & "change-type" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_change_type / $weight_systems;
          $matcher := $eval('/^.*' & "ownership" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_owner / $weight_systems;
          $matcher := $eval('/^.*' & "lifecycle" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_stage / $weight_systems;
          $matcher := $eval('/^.*' & "criticality" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_criticality / $weight_systems;
          $matcher := $eval('/^.*' & "groups" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_group / $weight_systems;
          $matcher := $eval('/^.*' & "ls_vs_lst" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_stage / $weight_systems;
          $matcher := $eval('/^.*' & "performance" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_performance / $weight_systems;
          $matcher := $eval('/^.*' & "sla" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_sla / $weight_systems;
          $matcher := $eval('/^.*' & "rpo" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_rpo / $weight_systems;
          $matcher := $eval('/^.*' & "monitoring" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_monitoring / $weight_systems;
          $matcher := $eval('/^.*' & "fp-live-stage" & '.*$/');
          $rules_temp := $rules[$matcher($)];
          $sum_except := $sum_except + $count($rules_temp) * $weight_stage / $weight_systems;
          $sum_except := $sum_except / $count($systems);
          $sum_except := $formatNumber($sum_except, "0.00000");
          $sum_except := $substring($sum_except, 0, 4); 
          $summary := ($reduce ($total, $sum) / $count($systems));
          $summary := $formatNumber($summary, "0.00000");
          $summary := $substring($summary, 0, 4);
          {"sum_except": $sum_except,
          "summary" : $summary,
          "errors" : $errors
          }   
      )
      
      
